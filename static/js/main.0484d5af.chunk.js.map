{"version":3,"sources":["components/WeatherCard.js","components/Temp.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","props","useState","weatherIcon","setweatherIcon","tempData","temp","humidity","pressure","weathermood","name","speed","country","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","className","console","log","style","fontSize","justifyContent","padding","color","toLocaleString","Temp","inputText","setInputText","setTempData","getWeatherData","a","url","fetch","response","json","data","main","weather","wind","sys","type","placeholder","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0484d5af.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst WeatherCard = (props) => {\r\n  const [weatherIcon, setweatherIcon] = useState(\"sunny\");\r\n  const {\r\n    temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset,\r\n  } = props.tempData;\r\n\r\n  useEffect(() => {\r\n    if (weathermood) {\r\n      switch (weathermood) {\r\n        case \"Clouds\":\r\n          setweatherIcon(\"wi-day-cloudy\");\r\n          break;\r\n        case \"Haze\":\r\n          setweatherIcon(\"wi-fog\");\r\n          break;\r\n        case \"Clear\":\r\n          setweatherIcon(\"wi-day-sunny\");\r\n          break;\r\n        case \"Rain\":\r\n          setweatherIcon(\"wi-showers\");\r\n          break;\r\n        case \"Snow\":\r\n          setweatherIcon(\"wi-snow\");\r\n          break;\r\n        default:\r\n          setweatherIcon(\"wi-day-sunny\");\r\n          break;\r\n      }\r\n    }\r\n  }, [weathermood]);\r\n\r\n  //converting susets seconds into time\r\n  let sec = sunset;\r\n  let date = new Date(sec * 1000);\r\n  let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n\r\n  return (\r\n    <div className=\"Display-container\">\r\n      {console.log(props)}\r\n      <div className=\"first center\">\r\n        <i style={{ fontSize: 60 }} className={`wi ${weatherIcon}`}></i>\r\n      </div>\r\n      <div className=\"second\">\r\n        <div\r\n          className=\"second-child-1 center\"\r\n          style={{\r\n            justifyContent: \"space-between\",\r\n            padding: \"0px 70px 0px 10px\",\r\n          }}\r\n        >\r\n          <span style={{ color: \"white\", fontSize: \"60px\" }}>{temp}Â°</span>\r\n          <div\r\n            style={{\r\n              color: \"white\",\r\n              fontSize: \"30px\",\r\n            }}\r\n          >\r\n            {weathermood}{\" \"}\r\n            <div>\r\n              {name} , {country}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"second-child-2 center\">\r\n          {new Date().toLocaleString()}\r\n        </div>\r\n      </div>\r\n      <div className=\"third\">\r\n        <div className=\"width\">\r\n          <i className=\"wi wi-sunset third-text\"></i>\r\n          <span className=\"third-text\">\r\n            <p>Sunset at</p>\r\n            <p>{timeStr}</p>\r\n          </span>\r\n        </div>\r\n        <div className=\"width\">\r\n          <i className=\"wi wi-humidity third-text\"></i>\r\n          <span className=\"third-text\">\r\n            {\" \"}\r\n            <p>{humidity}</p>\r\n            <p>Humidity</p>\r\n          </span>\r\n        </div>\r\n        <div className=\"width\">\r\n          <i className=\"wi wi-hail third-text\"></i>\r\n          <span className=\"third-text\">\r\n            {\" \"}\r\n            <p>Pressure</p>\r\n            <p>{pressure}</p>\r\n          </span>\r\n        </div>\r\n        <div className=\"width\">\r\n          <i className=\"wi wi-strong-wind third-text\"></i>\r\n          <span className=\"third-text\">\r\n            {\" \"}\r\n            <p>{speed}</p>\r\n            <p>Speed</p>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default WeatherCard;\r\n","// api.openweathermap.org/data/2.5/weather?q=pune&appid=abd793a49182af06d9e646d3b0ab6d1c\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport WeatherCard from \"./WeatherCard\";\r\nconst Temp = () => {\r\n  const [inputText, setInputText] = useState(\"karnal\");\r\n  const [tempData, setTempData] = useState({});\r\n  //setting input feild\r\n  const setInput = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  // API called and data recieved\r\n  const getWeatherData = async () => {\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${inputText}&units=metric&appid=abd793a49182af06d9e646d3b0ab6d1c`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(data);\r\n\r\n      // object destructuring in api\r\n      const { temp, humidity, pressure } = data.main;\r\n      const { main: weathermood } = data.weather[0];\r\n      const { name } = data;\r\n      const { speed } = data.wind;\r\n      const { country, sunset } = data.sys;\r\n\r\n      // taking all objects to use in app\r\n      const myWeatherInfo = {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n      };\r\n      setTempData(myWeatherInfo);\r\n      console.log(tempData);\r\n\r\n      //   console.log(temperature);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // on the time first time this fxn need to be called\r\n  useEffect(() => {\r\n    getWeatherData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container center\">\r\n      <div className=\"container-1 \">\r\n        <div className=\"input-Container center\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Country or City\"\r\n            value={inputText}\r\n            onChange={setInput}\r\n          />\r\n          <button onClick={getWeatherData}>Search</button>\r\n        </div>\r\n        <WeatherCard tempData={tempData} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Temp;\r\n","import React from \"react\";\nimport Temp from \"./components/Temp\";\nconst App = () => {\n  return (\n    <div>\n      <Temp></Temp>\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}